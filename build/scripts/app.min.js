!function(){"use strict";var e=angular.module("lgApp",["ngCookies","ngResource","ngSanitize","ngRoute","ui.grid","ui.grid.selection"]);e.config(["$routeProvider",function(e){e.when("/",{controller:"homeController",templateUrl:"modules/home/homeTemplate.html"}).when("/lifegroup/:slug",{controller:"lifegroupController",templateUrl:"modules/lifegroup/lifegroupTemplate.html"}).otherwise({redirectTo:"/"})}]).value("localStorage",window.localStorage).value("moment",window.moment).value("_",window._)}(),function(){"use strict";angular.module("lgApp").constant("lgConfig",{agesArr:[{min:0,max:100,title:"All Ages"},{min:20,max:39,title:"20s/30s"}]})}(),function(){"use strict";angular.module("lgApp").service("lgService",["$http",function(e){var t="http://daytonave.org/api";this.getLifegroups=function(){var o=[];return e.get(t+"/get_posts/?post_type=page").then(function(e){var t=e.data;return _.forEach(t.posts,function(e){e.custom_fields.isLifegroup&&o.push(e)}),o})},this.getLifegroupBySlug=function(o){return e.get(t+"/get_page/?slug=lifegroups/"+o)}}])}(),function(){"use strict";angular.module("lgApp").controller("homeController",["$scope","$location","lgService","uiGridConstants","lgConfig","localStorage","moment",function(e,t,o,l,i,r,n){var a={},s=r.getItem("lifegroups");e.lifegroups=[],e.contentReady=!1,e.gridOptions={enableRowSelection:!0,enableRowHeaderSelection:!1,enableHorizontalScrollbar:l.scrollbars.NEVER,enableVerticalScrollbar:l.scrollbars.NEVER,multiSelect:!1,columnDefs:[{field:"title",enableFiltering:!1},{field:"ages",enableFiltering:!1},{field:"day",enableFiltering:!1},{field:"time",enableFiltering:!1},{field:"campus",enableFiltering:!1}],data:[],onRegisterApi:function(o){e.gridApi=o,o.selection.on.rowSelectionChanged(e,function(e){t.path("/lifegroup/"+e.entity.slug)})}};var g=function(){_.forEach(e.lifegroups,function(t){var o=_.result(_.find(i.agesArr,{min:parseInt(t.custom_fields.lgAgeMin),max:parseInt(t.custom_fields.lgAgeMax)}),"title"),l=t.custom_fields.lgStartTime[0].split(":")[0].length>1?"1970-01-01T"+t.custom_fields.lgStartTime[0]:"1970-01-01T0"+t.custom_fields.lgStartTime[0];e.gridOptions.data.push({id:t.id,title:t.title,ages:o,day:t.custom_fields.lgDay[0],time:n.utc(l).format("h:mma"),campus:"true"===t.custom_fields.lgIsOffCampus[0]?"Off Campus":"On Campus",slug:t.slug})})},u=function(){o.getLifegroups().then(function(t){e.lifegroups=t;var o={timeStamp:n.utc().toDate(),data:t};r.setItem("lifegroups",JSON.stringify(o)),g(),e.contentReady=!0})};if(s)try{a=JSON.parse(s);var c=n.utc().diff(n.utc(a.timeStamp));n.duration(c).asMinutes()>15?(console.log("More than 15 minutes has passed since retrieving data. Retrieve from API instead."),r.removeItem("lifegroups"),u()):(e.lifegroups=a.data,console.log("lifegroups retrieved from local storage")),g()}catch(f){console.log("Error parsing lifegroups. Retrieving from API"),r.removeItem("lifegroups"),u()}finally{e.contentReady=!0}else console.log("lifegroups retrieved from API"),u()}])}(),function(){"use strict";angular.module("lgApp").controller("lifegroupController",["$scope","$routeParams","$location","lgService",function(e,t,o,l){var i={},r=window.localStorage.getItem(t.slug);e.lifegroup={},e.contentReady=!1;var n=function(){l.getLifegroupBySlug(t.slug).then(function(o){e.lifegroup=o.data.page;var l={timeStamp:moment.utc().toDate(),data:o};window.localStorage.setItem(t.slug,JSON.stringify(l)),e.contentReady=!0})};if(r)try{i=JSON.parse(r);var a=moment.utc().diff(moment.utc(i.timeStamp));moment.duration(a).asMinutes()>15?(console.log("More than 15 minutes has passed since retrieving data. Retrieve from API instead."),window.localStorage.removeItem(t.slug),n()):(e.lifegroup=i.data.data.page,console.log("lifegroup retrieved from local storage"))}catch(s){console.log("Error parsing lifegroup. Retrieving from API"),window.localStorage.removeItem(t.slug),n()}finally{e.contentReady=!0}else console.log("lifegroup retrieved from API"),n();e.navigateHome=function(){o.path("/")}}])}(),function(){"use strict";angular.module("lgApp").controller("navController",["$scope","$location",function(e,t){e["goto"]=function(e){t.path(e)}}])}(),function(){"use strict";angular.module("lgApp").directive("lgNavigation",function(){return{restrict:"E",templateUrl:"modules/navigation/navTemplate.html",controller:"navController"}})}();
//# sourceMappingURL=data:application/json;base64,